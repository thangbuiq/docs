{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"welcome to my tech doc # i mainly document this for myself, but i hope it helps you too. here you will find all the information you need to get started with the best practices in software development and data engineering. this technical documentation is a just-paste-one-block-away reference for me, and i hope it will be for you too. so i do hope you find this documentation helpful. Visit my: Portfolio: thangbuiq.work LinkedIn: thangbuiq","title":"tech doc"},{"location":"#welcome-to-my-tech-doc","text":"i mainly document this for myself, but i hope it helps you too. here you will find all the information you need to get started with the best practices in software development and data engineering. this technical documentation is a just-paste-one-block-away reference for me, and i hope it will be for you too. so i do hope you find this documentation helpful. Visit my: Portfolio: thangbuiq.work LinkedIn: thangbuiq","title":"welcome to my tech doc"},{"location":"data-engineer/airflow-lightweight/","text":"airflow lightweight (docker compose) # Read vietnamese step-by-step version here prerequisites # Make sure you have docker and docker-compose installed Follow my guide to install docker and docker-compose: here getting started # Clone this repo git clone https://github.com/thangbuiq/docker-airflow-lightweight cd docker-airflow-lightweight Optional: Create a .env file in the root directory with the fields in .env.example AIRFLOW_IMAGE_NAME = apache/airflow:slim-2.9.3 AIRFLOW_UID = 1000 AIRFLOW_GID = 1000 _AIRFLOW_WWW_USER_USERNAME = airflow _AIRFLOW_WWW_USER_PASSWORD = changeme Optional: Update the dags folder with your own dags Optional: Update the requirements.txt file with your own dependencies Run the whole airflow stack using: docker compose up -d # or make up if you missed the .env setup, the default values will be used, which are not secure default user: login: ` airflow ` , password: ` airflow ` Access the Airflow webserver at http://localhost:8080 update connections # Run this command to update connections: make update-connections This will add/modify/remove the connections by tracking the connections.json file. { \"your-conn-id-1\" : { \"conn_type\" : \"ssh\" , \"description\" : \"optional\" , \"login\" : \"required\" , \"password\" : \"required\" , \"host\" : \"xxx.xxx.xxx.xxx\" , \"port\" : 22 , \"schema\" : \"optional\" , \"extra\" : \"optional\" }, } Note that you should clear all connections in Admin -> Connections before run make update-connections .","title":"airflow lightweight (docker compose)"},{"location":"data-engineer/airflow-lightweight/#airflow-lightweight-docker-compose","text":"Read vietnamese step-by-step version here","title":"airflow lightweight (docker compose)"},{"location":"data-engineer/airflow-lightweight/#prerequisites","text":"Make sure you have docker and docker-compose installed Follow my guide to install docker and docker-compose: here","title":"prerequisites"},{"location":"data-engineer/airflow-lightweight/#getting-started","text":"Clone this repo git clone https://github.com/thangbuiq/docker-airflow-lightweight cd docker-airflow-lightweight Optional: Create a .env file in the root directory with the fields in .env.example AIRFLOW_IMAGE_NAME = apache/airflow:slim-2.9.3 AIRFLOW_UID = 1000 AIRFLOW_GID = 1000 _AIRFLOW_WWW_USER_USERNAME = airflow _AIRFLOW_WWW_USER_PASSWORD = changeme Optional: Update the dags folder with your own dags Optional: Update the requirements.txt file with your own dependencies Run the whole airflow stack using: docker compose up -d # or make up if you missed the .env setup, the default values will be used, which are not secure default user: login: ` airflow ` , password: ` airflow ` Access the Airflow webserver at http://localhost:8080","title":"getting started"},{"location":"data-engineer/airflow-lightweight/#update-connections","text":"Run this command to update connections: make update-connections This will add/modify/remove the connections by tracking the connections.json file. { \"your-conn-id-1\" : { \"conn_type\" : \"ssh\" , \"description\" : \"optional\" , \"login\" : \"required\" , \"password\" : \"required\" , \"host\" : \"xxx.xxx.xxx.xxx\" , \"port\" : 22 , \"schema\" : \"optional\" , \"extra\" : \"optional\" }, } Note that you should clear all connections in Admin -> Connections before run make update-connections .","title":"update connections"},{"location":"data-engineer/dbt-core-project-setup/","text":"dbt-core project setup # project folder name should be use lowercase and snake_case. this example i used bigquery as the adapter name. find the adapter name at docs.getdbt.com/docs/trusted-adapters with python3-venv # it is recommended to use a virtual environment to install dbt, or you would break your system python packages. ADAPTER_NAME = bigquery echo -n \"Enter your PROJECT_NAME: \" && read PROJECT_NAME echo \"Creating a new dbt project named ${ PROJECT_NAME } with ${ ADAPTER_NAME } adapter\" mkdir ${ PROJECT_NAME } cd ${ PROJECT_NAME } python3 -m venv .venv source .venv/bin/activate python3 -m pip install dbt-core dbt- ${ ADAPTER_NAME } dbt init ${ PROJECT_NAME } --profiles-dir . mv ${ PROJECT_NAME } /* . rm -r ${ PROJECT_NAME } with uv (highly recommended) # ADAPTER_NAME = bigquery echo -n \"Enter your PROJECT_NAME: \" && read PROJECT_NAME echo \"Creating a new dbt project named ${ PROJECT_NAME } with ${ ADAPTER_NAME } adapter\" uv init ${ PROJECT_NAME } cd ${ PROJECT_NAME } && rm hello.py uv add dbt uv add dbt- ${ ADAPTER_NAME } uv run dbt init ${ PROJECT_NAME } --profiles-dir . mv ${ PROJECT_NAME } /* . rm -r ${ PROJECT_NAME }","title":"dbt-core project setup"},{"location":"data-engineer/dbt-core-project-setup/#dbt-core-project-setup","text":"project folder name should be use lowercase and snake_case. this example i used bigquery as the adapter name. find the adapter name at docs.getdbt.com/docs/trusted-adapters","title":"dbt-core project setup"},{"location":"data-engineer/dbt-core-project-setup/#with-python3-venv","text":"it is recommended to use a virtual environment to install dbt, or you would break your system python packages. ADAPTER_NAME = bigquery echo -n \"Enter your PROJECT_NAME: \" && read PROJECT_NAME echo \"Creating a new dbt project named ${ PROJECT_NAME } with ${ ADAPTER_NAME } adapter\" mkdir ${ PROJECT_NAME } cd ${ PROJECT_NAME } python3 -m venv .venv source .venv/bin/activate python3 -m pip install dbt-core dbt- ${ ADAPTER_NAME } dbt init ${ PROJECT_NAME } --profiles-dir . mv ${ PROJECT_NAME } /* . rm -r ${ PROJECT_NAME }","title":"with python3-venv"},{"location":"data-engineer/dbt-core-project-setup/#with-uv-highly-recommended","text":"ADAPTER_NAME = bigquery echo -n \"Enter your PROJECT_NAME: \" && read PROJECT_NAME echo \"Creating a new dbt project named ${ PROJECT_NAME } with ${ ADAPTER_NAME } adapter\" uv init ${ PROJECT_NAME } cd ${ PROJECT_NAME } && rm hello.py uv add dbt uv add dbt- ${ ADAPTER_NAME } uv run dbt init ${ PROJECT_NAME } --profiles-dir . mv ${ PROJECT_NAME } /* . rm -r ${ PROJECT_NAME }","title":"with uv (highly recommended)"},{"location":"devops/dockerfile-best-practices/","text":"dockerfile best practices # never build image with root user at runtime # please keep in mind that default Dockerfile will ALWAYS run as root user what happens if you run a container with root user, and deploy it to production? A process running as root user inside a container is actually a process running as root user on the host machine . This means that if an attacker manages to exploit a vulnerability in your dockerize application, they will have root access to the host machine. instead, use a non-root user but with the sudo privilege to prevent this: Remove the sudo support part if you don't need it in runtime ARG USERNAME = user-name-goes-here ARG USER_UID = 1000 ARG USER_GID = $USER_UID RUN groupadd --gid $USER_GID $USERNAME \\ && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \\ # [ Optional ] Add sudo support for the non-root user && apt-get update \\ && apt-get install -y sudo \\ && echo $USERNAME ALL = \\( root \\) NOPASSWD:ALL > /etc/sudoers.d/ $USERNAME \\ && chmod 0440 /etc/sudoers.d/ $USERNAME # Set the default user. Omit if you want to keep the default as root. USER $USERNAME this is mainly refer from code.visualstudio.com/remote/advancedcontainers/add-nonroot-user you can also read this post (vietnamese), really well written and clear explanation: T\u1ea1i sao n\u00ean ch\u1ea1y \u1ee9ng d\u1ee5ng container v\u1edbi non-root user? use multi-stage builds # multi-stage builds are useful to reduce the size of the final image by using a smaller image to build the application and then copy the build artifacts to a smaller image for example in a node.js application, you just want to deliver the build artifacts (the dist folder) and not the big boy node_modules folder # build stage FROM node:22 as build WORKDIR /app COPY package*.json ./ RUN npm install COPY . . RUN npm run build # deploy stage (smaller image) FROM nginx:alpine COPY --from = build /app/dist /usr/share/nginx/html You can reduce the size from multiple GBs to just a few MBs :D use .dockerignore file # Docker will copy all files in the build context to the image, for example when you run COPY . . in the Dockerfile, Docker will copy all files in the build context to the image, including the md files or node_modules folder,... which is not needed in the image to prevent this, you can use a .dockerignore file to exclude files and folders from the build context *.md node_modules docker-compose.yml # ... RUN multiple commands in a single RUN # More layers in the image means more space, so it's better to combine multiple commands in a single RUN instruction Method 1: using && and \\ as a line continuation character RUN apt-get update && apt-get install -y \\ package1 \\ package2 \\ package3 Method 2: using <<EOF...EOF as escape characters RUN <<EOF apt-get update apt-get install -y \\ package1 \\ package2 \\ package3 EOF use ARG instead of ENV # Best practice is to use ARG instead of ENV to pass build-time variables to the Dockerfile For example the node version use case: ARG NODE_VERSION = 22 FROM node:${NODE_VERSION} And with this, you can build the image with a different node version: docker build --build-arg NODE_VERSION = 20 -t my-node-app .","title":"dockerfile best practices"},{"location":"devops/dockerfile-best-practices/#dockerfile-best-practices","text":"","title":"dockerfile best practices"},{"location":"devops/dockerfile-best-practices/#never-build-image-with-root-user-at-runtime","text":"please keep in mind that default Dockerfile will ALWAYS run as root user what happens if you run a container with root user, and deploy it to production? A process running as root user inside a container is actually a process running as root user on the host machine . This means that if an attacker manages to exploit a vulnerability in your dockerize application, they will have root access to the host machine. instead, use a non-root user but with the sudo privilege to prevent this: Remove the sudo support part if you don't need it in runtime ARG USERNAME = user-name-goes-here ARG USER_UID = 1000 ARG USER_GID = $USER_UID RUN groupadd --gid $USER_GID $USERNAME \\ && useradd --uid $USER_UID --gid $USER_GID -m $USERNAME \\ # [ Optional ] Add sudo support for the non-root user && apt-get update \\ && apt-get install -y sudo \\ && echo $USERNAME ALL = \\( root \\) NOPASSWD:ALL > /etc/sudoers.d/ $USERNAME \\ && chmod 0440 /etc/sudoers.d/ $USERNAME # Set the default user. Omit if you want to keep the default as root. USER $USERNAME this is mainly refer from code.visualstudio.com/remote/advancedcontainers/add-nonroot-user you can also read this post (vietnamese), really well written and clear explanation: T\u1ea1i sao n\u00ean ch\u1ea1y \u1ee9ng d\u1ee5ng container v\u1edbi non-root user?","title":"never build image with root user at runtime"},{"location":"devops/dockerfile-best-practices/#use-multi-stage-builds","text":"multi-stage builds are useful to reduce the size of the final image by using a smaller image to build the application and then copy the build artifacts to a smaller image for example in a node.js application, you just want to deliver the build artifacts (the dist folder) and not the big boy node_modules folder # build stage FROM node:22 as build WORKDIR /app COPY package*.json ./ RUN npm install COPY . . RUN npm run build # deploy stage (smaller image) FROM nginx:alpine COPY --from = build /app/dist /usr/share/nginx/html You can reduce the size from multiple GBs to just a few MBs :D","title":"use multi-stage builds"},{"location":"devops/dockerfile-best-practices/#use-dockerignore-file","text":"Docker will copy all files in the build context to the image, for example when you run COPY . . in the Dockerfile, Docker will copy all files in the build context to the image, including the md files or node_modules folder,... which is not needed in the image to prevent this, you can use a .dockerignore file to exclude files and folders from the build context *.md node_modules docker-compose.yml # ...","title":"use .dockerignore file"},{"location":"devops/dockerfile-best-practices/#run-multiple-commands-in-a-single-run","text":"More layers in the image means more space, so it's better to combine multiple commands in a single RUN instruction Method 1: using && and \\ as a line continuation character RUN apt-get update && apt-get install -y \\ package1 \\ package2 \\ package3 Method 2: using <<EOF...EOF as escape characters RUN <<EOF apt-get update apt-get install -y \\ package1 \\ package2 \\ package3 EOF","title":"RUN multiple commands in a single RUN"},{"location":"devops/dockerfile-best-practices/#use-arg-instead-of-env","text":"Best practice is to use ARG instead of ENV to pass build-time variables to the Dockerfile For example the node version use case: ARG NODE_VERSION = 22 FROM node:${NODE_VERSION} And with this, you can build the image with a different node version: docker build --build-arg NODE_VERSION = 20 -t my-node-app .","title":"use ARG instead of ENV"},{"location":"devops/gh-actions-deploy-mkdocs/","text":"gh actions - mkdocs on github pages # create file .github/workflows/mkdocs.yml normal deploy (with requirements.txt) # name : deploy on : push : branches : [ main , master ] permissions : contents : write jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - name : Configure Git Credentials run : | git config user.name github-actions[bot] git config user.email 41898282+github-actions[bot]@users.noreply.github.com - uses : actions/setup-python@v5 with : python-version : 3.x - run : pip install -r requirements.txt - run : mkdocs gh-deploy --force deploy with uv like me # name : deploy on : push : branches : [ main , master ] permissions : contents : write jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - name : Configure Git Credentials run : | git config user.name github-actions[bot] git config user.email 41898282+github-actions[bot]@users.noreply.github.com - uses : actions/setup-python@v5 with : python-version : 3.x - run : curl -LsSf https://astral.sh/uv/install.sh | sh - run : uv sync - run : uv run mkdocs gh-deploy --force","title":"gh actions - mkdocs on github pages"},{"location":"devops/gh-actions-deploy-mkdocs/#gh-actions-mkdocs-on-github-pages","text":"create file .github/workflows/mkdocs.yml","title":"gh actions - mkdocs on github pages"},{"location":"devops/gh-actions-deploy-mkdocs/#normal-deploy-with-requirementstxt","text":"name : deploy on : push : branches : [ main , master ] permissions : contents : write jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - name : Configure Git Credentials run : | git config user.name github-actions[bot] git config user.email 41898282+github-actions[bot]@users.noreply.github.com - uses : actions/setup-python@v5 with : python-version : 3.x - run : pip install -r requirements.txt - run : mkdocs gh-deploy --force","title":"normal deploy (with requirements.txt)"},{"location":"devops/gh-actions-deploy-mkdocs/#deploy-with-uv-like-me","text":"name : deploy on : push : branches : [ main , master ] permissions : contents : write jobs : deploy : runs-on : ubuntu-latest steps : - uses : actions/checkout@v4 - name : Configure Git Credentials run : | git config user.name github-actions[bot] git config user.email 41898282+github-actions[bot]@users.noreply.github.com - uses : actions/setup-python@v5 with : python-version : 3.x - run : curl -LsSf https://astral.sh/uv/install.sh | sh - run : uv sync - run : uv run mkdocs gh-deploy --force","title":"deploy with uv like me"},{"location":"devops/gh-actions-docker-images/","text":"gh actions - deploy docker images on tags # Tag with version number should trigger the build and push the image to the docker registry. For example: 1.0.0 , 1.0.1 , 1.1.0 , 2.0.0 , etc. If you want the v prefix, you can use the following regex pattern: v[0-9]+.[0-9]+.[0-9]+ . name : Build Image and Push to GitHub Container Registry run-name : BUILD - ${{ github.actor }} is trigger build/push with SHA:${{ github.sha }} on : push : tags : - '[0-9]+.[0-9]+.[0-9]+' permissions : contents : read pages : write id-token : write jobs : build_image : runs-on : ubuntu-20.04 steps : - uses : actions/checkout@v3 - name : Setup Docker Buildx uses : docker/setup-buildx-action@v3 - name : Login to Docker Hub uses : docker/login-action@v3 with : username : ${{ secrets.DOCKERHUB_USER }} password : ${{ secrets.DOCKERHUB_TOKEN }} - name : Build only to test if : ${{ !startsWith(github.ref, 'refs/tags/') }} uses : docker/build-push-action@v5 with : push : false tags : ${{ secrets.DOCKERHUB_USER }}/${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }} - name : Get the version if : ${{ startsWith(github.ref, 'refs/tags/') }} id : get_version run : | echo \"IMAGE_VERSION=$(echo $GITHUB_REF | sed -e 's/refs\\/tags\\///g')\" >> $GITHUB_OUTPUT - name : Build and push image to Docker Hub if : ${{ startsWith(github.ref, 'refs/tags/') }} uses : docker/build-push-action@v5 with : push : true tags : ${{ secrets.DOCKERHUB_USER }}/${{ secrets.DOCKERHUB_REPO }}:${{ steps.get_version.outputs.IMAGE_VERSION }}","title":"gh actions - deploy docker images on tags"},{"location":"devops/gh-actions-docker-images/#gh-actions-deploy-docker-images-on-tags","text":"Tag with version number should trigger the build and push the image to the docker registry. For example: 1.0.0 , 1.0.1 , 1.1.0 , 2.0.0 , etc. If you want the v prefix, you can use the following regex pattern: v[0-9]+.[0-9]+.[0-9]+ . name : Build Image and Push to GitHub Container Registry run-name : BUILD - ${{ github.actor }} is trigger build/push with SHA:${{ github.sha }} on : push : tags : - '[0-9]+.[0-9]+.[0-9]+' permissions : contents : read pages : write id-token : write jobs : build_image : runs-on : ubuntu-20.04 steps : - uses : actions/checkout@v3 - name : Setup Docker Buildx uses : docker/setup-buildx-action@v3 - name : Login to Docker Hub uses : docker/login-action@v3 with : username : ${{ secrets.DOCKERHUB_USER }} password : ${{ secrets.DOCKERHUB_TOKEN }} - name : Build only to test if : ${{ !startsWith(github.ref, 'refs/tags/') }} uses : docker/build-push-action@v5 with : push : false tags : ${{ secrets.DOCKERHUB_USER }}/${{ secrets.DOCKERHUB_REPO }}:${{ github.sha }} - name : Get the version if : ${{ startsWith(github.ref, 'refs/tags/') }} id : get_version run : | echo \"IMAGE_VERSION=$(echo $GITHUB_REF | sed -e 's/refs\\/tags\\///g')\" >> $GITHUB_OUTPUT - name : Build and push image to Docker Hub if : ${{ startsWith(github.ref, 'refs/tags/') }} uses : docker/build-push-action@v5 with : push : true tags : ${{ secrets.DOCKERHUB_USER }}/${{ secrets.DOCKERHUB_REPO }}:${{ steps.get_version.outputs.IMAGE_VERSION }}","title":"gh actions - deploy docker images on tags"},{"location":"devops/using-git-bot-in-ci/","text":"using git bot in CI workflow # this works for any CI/CD tool, but I will use GitHub Actions as an example. use case # To commit or make changes to the repository without human intervention, we can use Bot account. Simply create a new account and give it access to the repository. For example my use case is to merge branches using bot account. git configuration # Here is some bot configuration I often use: github-actions[bot] git config --global user.name github-actions [ bot ] git config --global user.email 41898282 +github-actions [ bot ] @users.noreply.github.com Source (GitHub API): https://api.github.com/users/github-actions[bot]/events/public dependabot[bot] git config --global user.name dependabot [ bot ] git config --global user.email 49699333 +dependabot [ bot ] @users.noreply.github.com Source (GitHub API): https://api.github.com/users/dependabot[bot]/events/public or any other bot of your organization Then you can interact with the repository as a bot. add bot config as a step in CI workflow # for example with GitHub Actions: - name : Configure Bot Git Credentials run : | git config --global user.name github-actions[bot] git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com","title":"using git bot in CI workflow"},{"location":"devops/using-git-bot-in-ci/#using-git-bot-in-ci-workflow","text":"this works for any CI/CD tool, but I will use GitHub Actions as an example.","title":"using git bot in CI workflow"},{"location":"devops/using-git-bot-in-ci/#use-case","text":"To commit or make changes to the repository without human intervention, we can use Bot account. Simply create a new account and give it access to the repository. For example my use case is to merge branches using bot account.","title":"use case"},{"location":"devops/using-git-bot-in-ci/#git-configuration","text":"Here is some bot configuration I often use: github-actions[bot] git config --global user.name github-actions [ bot ] git config --global user.email 41898282 +github-actions [ bot ] @users.noreply.github.com Source (GitHub API): https://api.github.com/users/github-actions[bot]/events/public dependabot[bot] git config --global user.name dependabot [ bot ] git config --global user.email 49699333 +dependabot [ bot ] @users.noreply.github.com Source (GitHub API): https://api.github.com/users/dependabot[bot]/events/public or any other bot of your organization Then you can interact with the repository as a bot.","title":"git configuration"},{"location":"devops/using-git-bot-in-ci/#add-bot-config-as-a-step-in-ci-workflow","text":"for example with GitHub Actions: - name : Configure Bot Git Credentials run : | git config --global user.name github-actions[bot] git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com","title":"add bot config as a step in CI workflow"},{"location":"linux-and-ubuntu-setup/docker/","text":"docker # tl;dr # if you prefer all-in-one command, you can use this: sudo apt-get update && sudo apt-get install ca-certificates curl -y sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc echo \\ \"deb [arch= $( dpkg --print-architecture ) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $( . /etc/os-release && echo \" $VERSION_CODENAME \" ) stable\" | \\ sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y sudo groupadd docker sudo usermod -aG docker $USER newgrp docker mkdir -p \" $HOME /.docker\" sudo chown \" $USER \" : \" $USER \" /home/ \" $USER \" /.docker -R sudo chmod g+rwx \" $HOME /.docker\" -R sudo systemctl enable docker.service sudo systemctl enable containerd.service step by step # optional: if you have any \"shitty\" docker installed before # for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc ; do sudo apt-get remove $pkg ; done install Docker in 1 block # sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc echo \\ \"deb [arch= $( dpkg --print-architecture ) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $( . /etc/os-release && echo \" $VERSION_CODENAME \" ) stable\" | \\ sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin post setup in 1 block # sudo groupadd docker sudo usermod -aG docker $USER newgrp docker mkdir -p \" $HOME /.docker\" sudo chown \" $USER \" : \" $USER \" /home/ \" $USER \" /.docker -R sudo chmod g+rwx \" $HOME /.docker\" -R sudo systemctl enable docker.service sudo systemctl enable containerd.service","title":"docker"},{"location":"linux-and-ubuntu-setup/docker/#docker","text":"","title":"docker"},{"location":"linux-and-ubuntu-setup/docker/#tldr","text":"if you prefer all-in-one command, you can use this: sudo apt-get update && sudo apt-get install ca-certificates curl -y sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc echo \\ \"deb [arch= $( dpkg --print-architecture ) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $( . /etc/os-release && echo \" $VERSION_CODENAME \" ) stable\" | \\ sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y sudo groupadd docker sudo usermod -aG docker $USER newgrp docker mkdir -p \" $HOME /.docker\" sudo chown \" $USER \" : \" $USER \" /home/ \" $USER \" /.docker -R sudo chmod g+rwx \" $HOME /.docker\" -R sudo systemctl enable docker.service sudo systemctl enable containerd.service","title":"tl;dr"},{"location":"linux-and-ubuntu-setup/docker/#step-by-step","text":"","title":"step by step"},{"location":"linux-and-ubuntu-setup/docker/#optional-if-you-have-any-shitty-docker-installed-before","text":"for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc ; do sudo apt-get remove $pkg ; done","title":"optional: if you have any \"shitty\" docker installed before"},{"location":"linux-and-ubuntu-setup/docker/#install-docker-in-1-block","text":"sudo apt-get update sudo apt-get install ca-certificates curl sudo install -m 0755 -d /etc/apt/keyrings sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc sudo chmod a+r /etc/apt/keyrings/docker.asc echo \\ \"deb [arch= $( dpkg --print-architecture ) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\ $( . /etc/os-release && echo \" $VERSION_CODENAME \" ) stable\" | \\ sudo tee /etc/apt/sources.list.d/docker.list > /dev/null sudo apt-get update sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin","title":"install Docker in 1 block"},{"location":"linux-and-ubuntu-setup/docker/#post-setup-in-1-block","text":"sudo groupadd docker sudo usermod -aG docker $USER newgrp docker mkdir -p \" $HOME /.docker\" sudo chown \" $USER \" : \" $USER \" /home/ \" $USER \" /.docker -R sudo chmod g+rwx \" $HOME /.docker\" -R sudo systemctl enable docker.service sudo systemctl enable containerd.service","title":"post setup in 1 block"},{"location":"linux-and-ubuntu-setup/fastfetch/","text":"fastfetch # install # sudo add-apt-repository ppa:zhangsongcui3371/fastfetch sudo apt update sudo apt install -y fastfetch config # Open ~/.config/fastfetch/config.jsonc and edit if you want to use my config: { \"$schema\" : \"https://github.com/fastfetch-cli/fastfetch/raw/dev/doc/json_schema.json\" , \"logo\" : null , \"display\" : { \"separator\" : \"> \" , \"color\" : { \"separator\" : \"red\" }, \"constants\" : [ \"\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\" , \"\u2502\\u001b[75C\u2502\\u001b[75D\" ] }, \"modules\" : [ { \"format\" : \"{#1}{#keys}\u256d{$1}\u256e\\u001b[76D {user-name-colored}{at-symbol-colored}{host-name-colored} \ud83d\udda5 \" , \"type\" : \"title\" }, { \"key\" : \"{$2}{#31}\uf013 kernel \" , \"type\" : \"kernel\" }, { \"key\" : \"{$2}{#32}\udb80\udd50 uptime \" , \"type\" : \"uptime\" }, { \"key\" : \"{$2}{#33}{icon} distro \" , \"type\" : \"os\" }, { \"key\" : \"{$2}{#34}\udb80\uddc4 desktop \" , \"type\" : \"de\" }, { \"key\" : \"{$2}{#35}\ue795 term \" , \"type\" : \"terminal\" }, { \"key\" : \"{$2}{#36}\uf489 shell \" , \"type\" : \"shell\" }, { \"key\" : \"{$2}{#35}\udb80\udf5b cpu \" , \"type\" : \"cpu\" }, { \"key\" : \"{$2}{#34}\udb80\udf5b gpu \" , \"type\" : \"gpu\" }, { \"key\" : \"{$2}{#33}\udb80\ude49 disk \" , \"type\" : \"disk\" , \"folders\" : \"/\" }, { \"key\" : \"{$2}{#32}\uefc5 memory \" , \"type\" : \"memory\" }, { \"key\" : \"{$2}{#31}\udb82\ude5f network \" , \"type\" : \"localip\" , \"format\" : \"{ipv4} ({ifname})\" }, { \"format\" : \"{#1}{#keys}\u251c{$1}\u2524\" , \"type\" : \"custom\" }, { \"key\" : \"{$2}{#39}\uefcc colors \" , \"type\" : \"colors\" , \"symbol\" : \"circle\" }, { \"format\" : \"{#1}{#keys}\u2570{$1}\u256f\" , \"type\" : \"custom\" } ] } Preview my fastfetch: start fastfetch when start at $HOME # Add to ~/.zshrc : if [[ \" $PWD \" == \" $HOME \" ]] ; then fastfetch fi","title":"fastfetch"},{"location":"linux-and-ubuntu-setup/fastfetch/#fastfetch","text":"","title":"fastfetch"},{"location":"linux-and-ubuntu-setup/fastfetch/#install","text":"sudo add-apt-repository ppa:zhangsongcui3371/fastfetch sudo apt update sudo apt install -y fastfetch","title":"install"},{"location":"linux-and-ubuntu-setup/fastfetch/#config","text":"Open ~/.config/fastfetch/config.jsonc and edit if you want to use my config: { \"$schema\" : \"https://github.com/fastfetch-cli/fastfetch/raw/dev/doc/json_schema.json\" , \"logo\" : null , \"display\" : { \"separator\" : \"> \" , \"color\" : { \"separator\" : \"red\" }, \"constants\" : [ \"\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\" , \"\u2502\\u001b[75C\u2502\\u001b[75D\" ] }, \"modules\" : [ { \"format\" : \"{#1}{#keys}\u256d{$1}\u256e\\u001b[76D {user-name-colored}{at-symbol-colored}{host-name-colored} \ud83d\udda5 \" , \"type\" : \"title\" }, { \"key\" : \"{$2}{#31}\uf013 kernel \" , \"type\" : \"kernel\" }, { \"key\" : \"{$2}{#32}\udb80\udd50 uptime \" , \"type\" : \"uptime\" }, { \"key\" : \"{$2}{#33}{icon} distro \" , \"type\" : \"os\" }, { \"key\" : \"{$2}{#34}\udb80\uddc4 desktop \" , \"type\" : \"de\" }, { \"key\" : \"{$2}{#35}\ue795 term \" , \"type\" : \"terminal\" }, { \"key\" : \"{$2}{#36}\uf489 shell \" , \"type\" : \"shell\" }, { \"key\" : \"{$2}{#35}\udb80\udf5b cpu \" , \"type\" : \"cpu\" }, { \"key\" : \"{$2}{#34}\udb80\udf5b gpu \" , \"type\" : \"gpu\" }, { \"key\" : \"{$2}{#33}\udb80\ude49 disk \" , \"type\" : \"disk\" , \"folders\" : \"/\" }, { \"key\" : \"{$2}{#32}\uefc5 memory \" , \"type\" : \"memory\" }, { \"key\" : \"{$2}{#31}\udb82\ude5f network \" , \"type\" : \"localip\" , \"format\" : \"{ipv4} ({ifname})\" }, { \"format\" : \"{#1}{#keys}\u251c{$1}\u2524\" , \"type\" : \"custom\" }, { \"key\" : \"{$2}{#39}\uefcc colors \" , \"type\" : \"colors\" , \"symbol\" : \"circle\" }, { \"format\" : \"{#1}{#keys}\u2570{$1}\u256f\" , \"type\" : \"custom\" } ] } Preview my fastfetch:","title":"config"},{"location":"linux-and-ubuntu-setup/fastfetch/#start-fastfetch-when-start-at-home","text":"Add to ~/.zshrc : if [[ \" $PWD \" == \" $HOME \" ]] ; then fastfetch fi","title":"start fastfetch when start at $HOME"},{"location":"linux-and-ubuntu-setup/ghostty-terminal/","text":"ghostty terminal # install in 1 block # source /etc/os-release GHOSTTY_DEB_URL = $( curl -s https://api.github.com/repos/mkasberg/ghostty-ubuntu/releases/latest | \\ grep -oP \"https://github.com/mkasberg/ghostty-ubuntu/releases/download/[^\\s/]+/ghostty_[^\\s/_]+_amd64_ ${ VERSION_ID } .deb\" ) GHOSTTY_DEB_FILE = $( basename \" $GHOSTTY_DEB_URL \" ) curl -LO \" $GHOSTTY_DEB_URL \" sudo dpkg -i \" $GHOSTTY_DEB_FILE \" rm \" $GHOSTTY_DEB_FILE \" set as default terminal # sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator $( which ghostty ) 50 sudo update-alternatives --set x-terminal-emulator $( which ghostty ) config to ghostty # Open ~/.config/ghostty/config and edit to config: theme = tokyonight font-size = 13 font-family = JetBrainsMono Nerd Font # change to your own font shell-integration-features = no-cursor,no-title cursor-style = block background-opacity = 0 .965 mouse-hide-while-typing = true mouse-scroll-multiplier = 2 window-theme = ghostty window-width = 1280 window-height = 720 window-padding-x = 15 window-padding-y = 10 window-decoration = true window-colorspace = \"display-p3\" gtk-adwaita = false gtk-titlebar = true adw-toolbar-style = \"flat\" bold-is-bright = true Example of the above ghostty config:","title":"ghostty terminal"},{"location":"linux-and-ubuntu-setup/ghostty-terminal/#ghostty-terminal","text":"","title":"ghostty terminal"},{"location":"linux-and-ubuntu-setup/ghostty-terminal/#install-in-1-block","text":"source /etc/os-release GHOSTTY_DEB_URL = $( curl -s https://api.github.com/repos/mkasberg/ghostty-ubuntu/releases/latest | \\ grep -oP \"https://github.com/mkasberg/ghostty-ubuntu/releases/download/[^\\s/]+/ghostty_[^\\s/_]+_amd64_ ${ VERSION_ID } .deb\" ) GHOSTTY_DEB_FILE = $( basename \" $GHOSTTY_DEB_URL \" ) curl -LO \" $GHOSTTY_DEB_URL \" sudo dpkg -i \" $GHOSTTY_DEB_FILE \" rm \" $GHOSTTY_DEB_FILE \"","title":"install in 1 block"},{"location":"linux-and-ubuntu-setup/ghostty-terminal/#set-as-default-terminal","text":"sudo update-alternatives --install /usr/bin/x-terminal-emulator x-terminal-emulator $( which ghostty ) 50 sudo update-alternatives --set x-terminal-emulator $( which ghostty )","title":"set as default terminal"},{"location":"linux-and-ubuntu-setup/ghostty-terminal/#config-to-ghostty","text":"Open ~/.config/ghostty/config and edit to config: theme = tokyonight font-size = 13 font-family = JetBrainsMono Nerd Font # change to your own font shell-integration-features = no-cursor,no-title cursor-style = block background-opacity = 0 .965 mouse-hide-while-typing = true mouse-scroll-multiplier = 2 window-theme = ghostty window-width = 1280 window-height = 720 window-padding-x = 15 window-padding-y = 10 window-decoration = true window-colorspace = \"display-p3\" gtk-adwaita = false gtk-titlebar = true adw-toolbar-style = \"flat\" bold-is-bright = true Example of the above ghostty config:","title":"config to ghostty"},{"location":"linux-and-ubuntu-setup/nerd-fonts/","text":"nerd fonts # Go to nerdfonts.com and select your favourite font, then replace the FONT_URL . For example with JetBrainsMono v3.3.0 : FONT_URL = \"https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/JetBrainsMono.zip\" FONT_DIR = \" $HOME /.local/share/fonts\" TMP_DIR = \"/tmp/nerd-fonts\" mkdir -p \" $TMP_DIR \" curl -Lo \" $TMP_DIR /JetBrainsMono.zip\" \" $FONT_URL \" unzip -o \" $TMP_DIR /JetBrainsMono.zip\" -d \" $TMP_DIR \" mkdir -p \" $FONT_DIR \" find \" $TMP_DIR \" -name \"*.ttf\" -exec cp {} \" $FONT_DIR \" \\; fc-cache -f -v rm -rf \" $TMP_DIR \"","title":"nerd fonts"},{"location":"linux-and-ubuntu-setup/nerd-fonts/#nerd-fonts","text":"Go to nerdfonts.com and select your favourite font, then replace the FONT_URL . For example with JetBrainsMono v3.3.0 : FONT_URL = \"https://github.com/ryanoasis/nerd-fonts/releases/download/v3.3.0/JetBrainsMono.zip\" FONT_DIR = \" $HOME /.local/share/fonts\" TMP_DIR = \"/tmp/nerd-fonts\" mkdir -p \" $TMP_DIR \" curl -Lo \" $TMP_DIR /JetBrainsMono.zip\" \" $FONT_URL \" unzip -o \" $TMP_DIR /JetBrainsMono.zip\" -d \" $TMP_DIR \" mkdir -p \" $FONT_DIR \" find \" $TMP_DIR \" -name \"*.ttf\" -exec cp {} \" $FONT_DIR \" \\; fc-cache -f -v rm -rf \" $TMP_DIR \"","title":"nerd fonts"},{"location":"linux-and-ubuntu-setup/nodejs-nvm/","text":"nodejs & nvm # install nodejs standalone # Replace 20 with your desired node version sudo apt update && sudo apt install -y curl curl -sL https://deb.nodesource.com/setup_20.x | sudo bash - sudo apt update && sudo apt install -y nodejs install nodejs with nvm # curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash add to ~/.zshrc or ~/.bashrc : export NVM_DIR = \" $( [ -z \" ${ XDG_CONFIG_HOME - } \" ] && printf %s \" ${ HOME } /.nvm\" || printf %s \" ${ XDG_CONFIG_HOME } /nvm\" ) \" [ -s \" $NVM_DIR /nvm.sh\" ] && \\. \" $NVM_DIR /nvm.sh\" # This loads nvm install a node LTS version: nvm install --lts check for installed nodes and use: nvm ls nvm use <>","title":"nodejs &amp; nvm"},{"location":"linux-and-ubuntu-setup/nodejs-nvm/#nodejs-nvm","text":"","title":"nodejs &amp; nvm"},{"location":"linux-and-ubuntu-setup/nodejs-nvm/#install-nodejs-standalone","text":"Replace 20 with your desired node version sudo apt update && sudo apt install -y curl curl -sL https://deb.nodesource.com/setup_20.x | sudo bash - sudo apt update && sudo apt install -y nodejs","title":"install nodejs standalone"},{"location":"linux-and-ubuntu-setup/nodejs-nvm/#install-nodejs-with-nvm","text":"curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash add to ~/.zshrc or ~/.bashrc : export NVM_DIR = \" $( [ -z \" ${ XDG_CONFIG_HOME - } \" ] && printf %s \" ${ HOME } /.nvm\" || printf %s \" ${ XDG_CONFIG_HOME } /nvm\" ) \" [ -s \" $NVM_DIR /nvm.sh\" ] && \\. \" $NVM_DIR /nvm.sh\" # This loads nvm install a node LTS version: nvm install --lts check for installed nodes and use: nvm ls nvm use <>","title":"install nodejs with nvm"},{"location":"linux-and-ubuntu-setup/nvim-lazyvim/","text":"nvim & lazyvim # neovim (nvim) # curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz sudo rm -rf /opt/nvim sudo tar -C /opt -xzf nvim-linux64.tar.gz echo 'export PATH=\"$PATH:/opt/nvim-linux64/bin\"' >> ~/.zshrc source ~/.zshrc replace with ~/.bashrc if you use bash lazyvim # mv ~/.config/nvim { ,.bak } mv ~/.local/share/nvim { ,.bak } mv ~/.local/state/nvim { ,.bak } mv ~/.cache/nvim { ,.bak } git clone https://github.com/LazyVim/starter ~/.config/nvim rm -rf ~/.config/nvim/.git nvim refer to repo https://github.com/LazyVim/starter","title":"nvim &amp; lazyvim"},{"location":"linux-and-ubuntu-setup/nvim-lazyvim/#nvim-lazyvim","text":"","title":"nvim &amp; lazyvim"},{"location":"linux-and-ubuntu-setup/nvim-lazyvim/#neovim-nvim","text":"curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim-linux64.tar.gz sudo rm -rf /opt/nvim sudo tar -C /opt -xzf nvim-linux64.tar.gz echo 'export PATH=\"$PATH:/opt/nvim-linux64/bin\"' >> ~/.zshrc source ~/.zshrc replace with ~/.bashrc if you use bash","title":"neovim (nvim)"},{"location":"linux-and-ubuntu-setup/nvim-lazyvim/#lazyvim","text":"mv ~/.config/nvim { ,.bak } mv ~/.local/share/nvim { ,.bak } mv ~/.local/state/nvim { ,.bak } mv ~/.cache/nvim { ,.bak } git clone https://github.com/LazyVim/starter ~/.config/nvim rm -rf ~/.config/nvim/.git nvim refer to repo https://github.com/LazyVim/starter","title":"lazyvim"},{"location":"linux-and-ubuntu-setup/python-uv/","text":"python # python is already in ubuntu, if you want to make sure that it's available: sudo apt update && sudo apt install python3-pip python3-venv -y package manager # uv # curl -LsSf https://astral.sh/uv/install.sh | sh poetry # curl -sSL https://install.python-poetry.org | python3 -","title":"python"},{"location":"linux-and-ubuntu-setup/python-uv/#python","text":"python is already in ubuntu, if you want to make sure that it's available: sudo apt update && sudo apt install python3-pip python3-venv -y","title":"python"},{"location":"linux-and-ubuntu-setup/python-uv/#package-manager","text":"","title":"package manager"},{"location":"linux-and-ubuntu-setup/python-uv/#uv","text":"curl -LsSf https://astral.sh/uv/install.sh | sh","title":"uv"},{"location":"linux-and-ubuntu-setup/python-uv/#poetry","text":"curl -sSL https://install.python-poetry.org | python3 -","title":"poetry"},{"location":"linux-and-ubuntu-setup/starship-prompt/","text":"starship prompt # setup starship prompt # curl -sS https://starship.rs/install.sh | sh echo 'eval \"$(starship init zsh)\"' >> ~/. $( basename $SHELL ) rc arrow prompt with starship # run this: mkdir -p ~/.config/ cat <<EOF > ~/.config/starship.toml [character] # The name of the module we are configuring is 'character' success_symbol = '[\u279c](bold green)' error_symbol = '[\u279c](bold red)' vicmd_symbol = '[\u279c](blue)' EOF","title":"starship prompt"},{"location":"linux-and-ubuntu-setup/starship-prompt/#starship-prompt","text":"","title":"starship prompt"},{"location":"linux-and-ubuntu-setup/starship-prompt/#setup-starship-prompt","text":"curl -sS https://starship.rs/install.sh | sh echo 'eval \"$(starship init zsh)\"' >> ~/. $( basename $SHELL ) rc","title":"setup starship prompt"},{"location":"linux-and-ubuntu-setup/starship-prompt/#arrow-prompt-with-starship","text":"run this: mkdir -p ~/.config/ cat <<EOF > ~/.config/starship.toml [character] # The name of the module we are configuring is 'character' success_symbol = '[\u279c](bold green)' error_symbol = '[\u279c](bold red)' vicmd_symbol = '[\u279c](blue)' EOF","title":"arrow prompt with starship"},{"location":"linux-and-ubuntu-setup/zsh-zimfw/","text":"zsh & zimfw # setup zsh and zimfw # sudo apt update && sudo apt install curl zsh -y chsh -s $( which zsh ) curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh zsh -c \"source ~/.zshrc\" setup starship prompt and zim plugins # Open your favourite code editor and edit the file ~/.zimrc : # Sets sane Zsh built-in environment options. zmodule environment zmodule git zmodule input zmodule termtitle zmodule utility # Completion zmodule zsh-users/zsh-completions --fpath src zmodule completion # Customize zmodule https://github.com/agkozak/zsh-z # Fish-like syntax highlighting for Zsh. zmodule zsh-users/zsh-syntax-highlighting zmodule zsh-users/zsh-history-substring-search zmodule zsh-users/zsh-autosuggestions Init zimfw modules: zimfw uninstall && zimfw install","title":"zsh &amp; zimfw"},{"location":"linux-and-ubuntu-setup/zsh-zimfw/#zsh-zimfw","text":"","title":"zsh &amp; zimfw"},{"location":"linux-and-ubuntu-setup/zsh-zimfw/#setup-zsh-and-zimfw","text":"sudo apt update && sudo apt install curl zsh -y chsh -s $( which zsh ) curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh zsh -c \"source ~/.zshrc\"","title":"setup zsh and zimfw"},{"location":"linux-and-ubuntu-setup/zsh-zimfw/#setup-starship-prompt-and-zim-plugins","text":"Open your favourite code editor and edit the file ~/.zimrc : # Sets sane Zsh built-in environment options. zmodule environment zmodule git zmodule input zmodule termtitle zmodule utility # Completion zmodule zsh-users/zsh-completions --fpath src zmodule completion # Customize zmodule https://github.com/agkozak/zsh-z # Fish-like syntax highlighting for Zsh. zmodule zsh-users/zsh-syntax-highlighting zmodule zsh-users/zsh-history-substring-search zmodule zsh-users/zsh-autosuggestions Init zimfw modules: zimfw uninstall && zimfw install","title":"setup starship prompt and zim plugins"},{"location":"misc/mkdocs-terminal-theme/","text":"mkdocs terminal theme # pip install mkdocs-terminal Then init mkdocs project at your folder: mkdocs new . Then add to mkdocs.yml : theme : name : terminal palette : dark # or light if you want to use the tokyonight theme like my current site, you can use custom css, refer to here , then add the extra css files to mkdocs.yml : extra_css : - assets/styles.css Then run the server: mkdocs serve references # https://github.com/ntno/mkdocs-terminal?tab=readme-ov-file notes # some mkdocs-material extensions or plugins may not work with this theme, so you may need to disable them in mkdocs.yml , for copy button and highlight code, you can use the default theme, or clone my repo for easy setup. git clone https://github.com/thangbuiq/docs.git cd docs find docs/* -not -path \"docs/assets*\" -exec rm -rf {} + touch docs/index.md then add your own docs to the docs folder.","title":"mkdocs terminal theme"},{"location":"misc/mkdocs-terminal-theme/#mkdocs-terminal-theme","text":"pip install mkdocs-terminal Then init mkdocs project at your folder: mkdocs new . Then add to mkdocs.yml : theme : name : terminal palette : dark # or light if you want to use the tokyonight theme like my current site, you can use custom css, refer to here , then add the extra css files to mkdocs.yml : extra_css : - assets/styles.css Then run the server: mkdocs serve","title":"mkdocs terminal theme"},{"location":"misc/mkdocs-terminal-theme/#references","text":"https://github.com/ntno/mkdocs-terminal?tab=readme-ov-file","title":"references"},{"location":"misc/mkdocs-terminal-theme/#notes","text":"some mkdocs-material extensions or plugins may not work with this theme, so you may need to disable them in mkdocs.yml , for copy button and highlight code, you can use the default theme, or clone my repo for easy setup. git clone https://github.com/thangbuiq/docs.git cd docs find docs/* -not -path \"docs/assets*\" -exec rm -rf {} + touch docs/index.md then add your own docs to the docs folder.","title":"notes"}]}